import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from database import Database # –ü–æ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —è–≤–Ω–æ, –ø–æ—Ç–æ–º –±—É–¥–µ–º –±—Ä–∞—Ç—å –∏–∑ dp

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_main_menu(role):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏."""
    # (–ö–û–î –§–£–ù–ö–¶–ò–ò get_main_menu –ò–ó bot.py –ü–ï–†–ï–ù–û–°–ò–ú –°–Æ–î–ê)
    # ... (–û—Å—Ç–∞–≤—å—Ç–µ —Ç—É –∂–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é ReplyKeyboardMarkup)
    buttons = []
    
    if role == '–∞–¥–º–∏–Ω':
        buttons = [
            [types.KeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã"), types.KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏")],
            [types.KeyboardButton(text="‚ö†Ô∏è –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ó–∞–∫–∞–∑—ã"), types.KeyboardButton(text="üì¶ –°–∫–ª–∞–¥/–ü—Ä–∏—Ö–æ–¥")],
            [types.KeyboardButton(text="üí∞ –†–∞—Å—á–µ—Ç—ã"), types.KeyboardButton(text="üõ†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")]
        ]
    # ... (–î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π)
    elif role == '–∑–∞–≤—Å–∫–ª–∞–¥–∞':
        buttons = [
            [types.KeyboardButton(text="üì¶ –ü—Ä–∏–µ–º–∫–∞ –¢–æ–≤–∞—Ä–∞"), types.KeyboardButton(text="üõ†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –û—Å—Ç–∞—Ç–∫–æ–≤")]
        ]
    
    menu = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é"
    )
    return menu

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.message(CommandStart())
async def send_welcome(message: types.Message, state: FSMContext, db: Database = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."""
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ë–î –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Dispatcher
    if db is None:
        db = message.bot.get('db') 
        if not db:
             # –≠—Ç–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ db –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ dp
             from database import Database
             db = Database()
             
    telegram_id = message.from_user.id
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    role, name = db.get_user_role(telegram_id)
    
    if role:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        menu = get_main_menu(role)
        await message.reply(
            f"–ü—Ä–∏–≤–µ—Ç, {name}! –í–∞—à–∞ —Ä–æ–ª—å: **{role}**.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu,
            parse_mode="Markdown"
        )
    # ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" or F.text == "–û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: types.Message, state: FSMContext, db: Database = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    await state.clear()
    
    if db is None:
        db = message.bot.get('db')
    
    role, _ = db.get_user_role(message.from_user.id)
    
    await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu(role))