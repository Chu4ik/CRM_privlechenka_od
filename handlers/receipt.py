import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database  # –î–ª—è –∞–Ω–æ—Ç–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤
from .auth import get_main_menu  # –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

router = Router()

# ----------------------------------------------------------------------
# FSM –°–¢–ê–ù–´
# ----------------------------------------------------------------------

class ReceiptStates(StatesGroup):
    waiting_for_supplier = State()
    waiting_for_item_name = State()
    waiting_for_quantity = State()
    waiting_for_price = State()
    # –°—Ç–∞–Ω adding_more_items –≤–∏–¥–∞–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –ª–æ–≥—ñ–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∞ –≤ waiting_for_item_name

# ----------------------------------------------------------------------
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò (–ó–∞–ª–∏—à–∞—î–º–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –º–µ–Ω—é)
# ----------------------------------------------------------------------

def get_receipt_menu():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –ø—Ä–∏—Ö–æ–¥—É: –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."""
    # –ü—Ä–∏–º—ñ—Ç–∫–∞: –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏–≤–æ–¥—É,
    # –∞–ª–µ –∑–∞–ª–∏—à–µ–Ω–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è —ñ–Ω—à–∏—Ö —Ü—ñ–ª–µ–π.
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")],
            [types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")]
        ],
        resize_keyboard=True
    )

# ----------------------------------------------------------------------
# –û–°–ù–û–í–ù–ò–ô –¶–ò–ö–õ –ü–†–ò–ô–ú–ê–ù–ù–Ø –¢–û–í–ê–†–£
# ----------------------------------------------------------------------

@router.message(F.text == "üì¶ –°–∫–ª–∞–¥/–ü—Ä–∏—Ö–æ–¥" or F.text == "üì¶ –ü—Ä–∏–µ–º–∫–∞ –¢–æ–≤–∞—Ä–∞")
async def handle_start_receipt(message: types.Message, state: FSMContext, db: Database):
    telegram_id = message.from_user.id
    role, _ = db.get_user_role(telegram_id) 

    if role not in ['–∞–¥–º–∏–Ω', '–∑–∞–≤—Å–∫–ª–∞–¥–∞']:
        await message.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è.")
        return

    # 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤
    suppliers = db.get_suppliers() 

    if not suppliers:
        await message.reply("–í —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤. –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
        await state.clear()
        return

    # 2. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤
    supplier_map = {name: id for id, name in suppliers}
    
    await state.set_data({'supplier_map': supplier_map})

    buttons = [types.KeyboardButton(text=name) for name in supplier_map.keys()]
    keyboard_rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard_rows.append([types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")])
    
    menu = types.ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"
    )

    await state.set_state(ReceiptStates.waiting_for_supplier)
    await message.reply("–ü–æ—á–Ω—ñ–º–æ –ø—Ä–∏–π–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞:", reply_markup=menu)


@router.message(ReceiptStates.waiting_for_supplier)
async def process_supplier(message: types.Message, state: FSMContext, db: Database):
    supplier_name = message.text
    data = await state.get_data()
    supplier_map = data.get('supplier_map')
    
    if supplier_name == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥":
        await state.clear()
        await message.reply("–ü—Ä–∏–π–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu(db.get_user_role(message.from_user.id)[0]))
        return

    if supplier_name not in supplier_map:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –∑—ñ —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫.")
        return

    supplier_id = supplier_map[supplier_name]
    
    # 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
    items = db.get_items_by_supplier(supplier_id)
    
    if not items:
        await message.reply(f"–£ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ **{supplier_name}** –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ—ó –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–æ–≥–æ –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ.", parse_mode="Markdown")
        return

    # item_map: {–Ω–∞–∑–≤–∞: (id, —Ü—ñ–Ω–∞)}
    item_map = {name: (id, price) for id, name, price in items}
    
    # 2. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ —ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
    await state.update_data(
        current_receipt_supplier_id=supplier_id,
        current_receipt_supplier_name=supplier_name,
        current_items_map=item_map,
        current_receipt_id=None
    )
    
    # 3. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç–æ–≤–∞—Ä—ñ–≤ (+ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è)
    item_buttons = [types.KeyboardButton(text=name) for name in item_map.keys()]
    keyboard_rows = [item_buttons[i:i + 2] for i in range(0, len(item_buttons), 2)]
    keyboard_rows.append([types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ü—Ä–∏—Ö—ñ–¥"), types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")])
    
    menu = types.ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        input_field_placeholder=f"–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –≤—ñ–¥ {supplier_name}"
    )

    await state.set_state(ReceiptStates.waiting_for_item_name)
    await message.reply(f"–í–∏ –æ–±—Ä–∞–ª–∏ **{supplier_name}**. –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è:", reply_markup=menu, parse_mode="Markdown")

# ----------------------------------------------------------------------
# –ü–†–Ü–û–†–ò–¢–ï–¢–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø waiting_for_item_name (–ó–ê–í–ï–†–®–ï–ù–ù–Ø/–°–ö–ê–°–£–í–ê–ù–ù–Ø)
# ----------------------------------------------------------------------

@router.message(ReceiptStates.waiting_for_item_name, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")
async def handle_finish_receipt(message: types.Message, state: FSMContext, db: Database):
    data = await state.get_data()
    receipt_id = data.get('current_receipt_id')
    
    role, _ = db.get_user_role(message.from_user.id)
    
    await message.reply(
        f"üéâ **–ü—Ä–∏—Ö—ñ–¥ ‚Ññ{receipt_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n–î–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ, –∑–∞–ª–∏—à–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.",
        reply_markup=get_main_menu(role),
        parse_mode="Markdown"
    )
    await state.clear() 

@router.message(ReceiptStates.waiting_for_item_name, F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")
async def handle_cancel_receipt_item_name_state(message: types.Message, state: FSMContext, db: Database):
    await state.clear()
    await message.reply("–ü—Ä–∏–π–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu(db.get_user_role(message.from_user.id)[0]))

# ----------------------------------------------------------------------
# –û–°–ù–û–í–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –í–ò–ë–û–†–£ –¢–û–í–ê–†–£
# ----------------------------------------------------------------------

@router.message(ReceiptStates.waiting_for_item_name)
async def process_item_name(message: types.Message, state: FSMContext, db: Database):
    item_name = message.text
    
    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤–∏—â–µ, —Ç—É—Ç –ª–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
    
    data = await state.get_data()
    item_map = data.get('current_items_map')

    if item_name not in item_map:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç
        supplier_name = data.get('current_receipt_supplier_name')
        
        item_buttons = [types.KeyboardButton(text=name) for name in item_map.keys()]
        keyboard_rows = [item_buttons[i:i + 2] for i in range(0, len(item_buttons), 2)]
        keyboard_rows.append([types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ü—Ä–∏—Ö—ñ–¥"), types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")])
        
        menu = types.ReplyKeyboardMarkup(
            keyboard=keyboard_rows,
            resize_keyboard=True,
            input_field_placeholder=f"–î–æ–¥–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä –≤—ñ–¥ {supplier_name}"
        )
        
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=menu)
        return

    item_id, default_price = item_map[item_name]
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Ç–∞ —ñ–º'—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await state.update_data(
        current_item_id=item_id,
        current_item_name=item_name,
        current_price=default_price # –ú–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —è–∫ –ø—ñ–¥–∫–∞–∑–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
    )

    await state.set_state(ReceiptStates.waiting_for_quantity)
    
    # –í–∏–≤–æ–¥–∏–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    menu = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")]],
        resize_keyboard=True
    )
    await message.reply(f"–¢–æ–≤–∞—Ä: **{item_name}**.\n–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10.5):",
                        reply_markup=menu,
                        parse_mode="Markdown")

# ----------------------------------------------------------------------
# –û–ë–†–û–ë–ù–ò–ö–ò –ö–Ü–õ–¨–ö–û–°–¢–Ü –¢–ê –¶–Ü–ù–ò
# ----------------------------------------------------------------------

@router.message(ReceiptStates.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext, db: Database):
    try:
        quantity = float(message.text.replace(',', '.'))
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10 –∞–±–æ 5.5):")
        return

    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥":
        await state.clear()
        await message.reply("–ü—Ä–∏–π–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu(db.get_user_role(message.from_user.id)[0]))
        return

    await state.update_data(current_quantity=quantity)
    
    # --- –ï–¢–ê–ü –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ö–Ü–õ–¨–ö–û–°–¢–Ü ---
    data = await state.get_data()
    item_name = data['current_item_name']
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ (–í–≤–µ—Å—Ç–∏ —Ü—ñ–Ω—É)", callback_data="receipt_confirm_quantity")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data="receipt_edit_quantity")]
    ])
    
    await message.reply(
        f"–¢–æ–≤–∞—Ä **{item_name}**:\n–í–≤–µ–¥–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: **{quantity}**.\n–í—Å–µ –≤—ñ—Ä–Ω–æ?",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.message(ReceiptStates.waiting_for_price)
async def process_price_and_save_line(message: types.Message, state: FSMContext, db: Database):
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50.00):")
        return

    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥":
        await state.clear()
        await message.reply("–ü—Ä–∏–π–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu(db.get_user_role(message.from_user.id)[0]))
        return

    await state.update_data(current_price=price)
    
    # --- –ï–¢–ê–ü –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –¶–Ü–ù–ò –¢–ê –ó–ê–ü–ò–°–£ ---
    data = await state.get_data()
    item_name = data['current_item_name']
    quantity = data['current_quantity']
    total_amount = round(quantity * price, 2)
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∏", callback_data="receipt_save_line")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data="receipt_edit_quantity")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data="receipt_edit_price")]
    ])
    
    await message.reply(
        f"**–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º:**\n"
        f"–¢–æ–≤–∞—Ä: {item_name}\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}\n"
        f"–¶—ñ–Ω–∞: {price} –∑–∞ –æ–¥.\n"
        f"–°—É–º–∞: {total_amount}",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# ----------------------------------------------------------------------
# –û–ë–†–û–ë–ù–ò–ö–ò INLINE-–ö–ù–û–ü–û–ö (–†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –¢–ê –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø)
# ----------------------------------------------------------------------

@router.callback_query(F.data == "receipt_confirm_quantity", ReceiptStates.waiting_for_quantity)
async def handle_confirm_quantity(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ReceiptStates.waiting_for_price)
    await callback.message.edit_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ –æ–¥–∏–Ω–∏—Ü—é —Ç–æ–≤–∞—Ä—É:")
    await callback.answer()


@router.callback_query(F.data == "receipt_edit_quantity")
async def handle_edit_quantity(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ReceiptStates.waiting_for_quantity)
    
    # 1. –†–µ–¥–∞–≥—É—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ Inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        "‚úèÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ **—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ**.",
        parse_mode="Markdown",
        reply_markup=None # <--- –í–∞–∂–ª–∏–≤–æ: –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É!
    )
    
    # 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    menu = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")]],
        resize_keyboard=True
    )
    await callback.message.answer(
        "**–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10.5):",
        reply_markup=menu,
        parse_mode="Markdown"
    )
    await callback.answer("–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ.")


@router.callback_query(F.data == "receipt_edit_price")
async def handle_edit_price(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ReceiptStates.waiting_for_price)
    
    # 1. –†–µ–¥–∞–≥—É—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ Inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        "‚úèÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ **—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏**.",
        parse_mode="Markdown",
        reply_markup=None # <--- –í–∞–∂–ª–∏–≤–æ: –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É!
    )

    # 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    menu = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")]],
        resize_keyboard=True
    )
    await callback.message.answer(
        "**–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏** –∑–∞ –æ–¥–∏–Ω–∏—Ü—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50.00):",
        reply_markup=menu,
        parse_mode="Markdown"
    )
    await callback.answer("–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏.")



@router.callback_query(F.data == "receipt_save_line", ReceiptStates.waiting_for_price)
async def handle_save_line(callback: types.CallbackQuery, state: FSMContext, db: Database):
    
    # ----------------------------------------------------
    # 1. –ó–ê–•–ò–°–¢ –í–Ü–î –ü–û–î–í–Ü–ô–ù–û–ì–û –ù–ê–¢–ò–°–ö–ê–ù–ù–Ø –¢–ê –í–ò–î–ê–õ–ï–ù–ù–Ø –ö–ù–û–ü–ö–ò
    # ----------------------------------------------------
    
    # –ù–µ–≥–∞–π–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—é
    await callback.answer("–†—è–¥–æ–∫ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!") 
    
    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ –∫–Ω–æ–ø–∫—É "–ó–±–µ—Ä–µ–≥—Ç–∏" –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º —É –ë–î
    await callback.message.edit_text(
        "üìù **–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Å...**",
        parse_mode="Markdown",
        reply_markup=None 
    )

    data = await state.get_data()
    price = data['current_price']
    quantity = data['current_quantity']
    item_id = data['current_item_id']
    item_name = data['current_item_name']
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –¥–ª—è —Ä—è–¥–∫–∞
    line_total = round(quantity * price, 2)
    
    receipt_id = data.get('current_receipt_id')
    
    # ----------------------------------------------------
    # 2. –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–ì–û–õ–û–í–ö–ê –¢–ê –û–ë–õ–Ü–ö –ó–ê–ë–û–†–ì–û–í–ê–ù–û–°–¢–Ü
    # ----------------------------------------------------
    if not receipt_id:
        supplier_id = data['current_receipt_supplier_id']
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—Ö–æ–¥—É (–ø–æ–≤–µ—Ä—Ç–∞—î ID –∞–±–æ None)
        receipt_id = db.create_new_receipt(
            supplier_id=supplier_id,
            user_id=callback.from_user.id
        )
        
        if not receipt_id:
             await callback.message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—Ö–æ–¥—É. –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
             await state.clear()
             return
             
        # –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ü–û–ß–ê–¢–ö–û–í–û–ì–û –ë–û–†–ì–£: —Å—Ç–∞—Ç—É—Å '–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ' (–≤–∏—Ä—ñ—à–µ–Ω–Ω—è CHECK constraint)
        db.register_initial_debt(receipt_id) 
        
        await state.update_data(current_receipt_id=receipt_id)

    # 3. –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –ø—Ä–∏—Ö–æ–¥—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–∏—à–∫–∏
    db.add_receipt_line(
        receipt_id=receipt_id,
        item_id=item_id,
        quantity=quantity,
        price=price
    )
    db.update_inventory(
        item_id=item_id,
        quantity=quantity,
        price=price
    )

    # 4. –û–ù–û–í–õ–ï–ù–ù–Ø –°–£–ú–ò –ë–û–†–ì–£ –ù–ê –°–£–ú–£ –ù–û–í–û–ì–û –†–Ø–î–ö–ê
    db.update_debt_amount(receipt_id, line_total)
    
    # ----------------------------------------------------
    # 5. –ü–ï–†–ï–•–Ü–î –î–û –î–û–î–ê–í–ê–ù–ù–Ø –ù–ê–°–¢–£–ü–ù–û–ì–û –¢–û–í–ê–†–£
    # ----------------------------------------------------
    supplier_name = data.get('current_receipt_supplier_name')
    item_map = data['current_items_map']

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç–æ–≤–∞—Ä—ñ–≤ + –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    item_buttons = [types.KeyboardButton(text=name) for name in item_map.keys()]
    keyboard_rows = [item_buttons[i:i + 2] for i in range(0, len(item_buttons), 2)]
    keyboard_rows.append([types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ü—Ä–∏—Ö—ñ–¥"), types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")])
    
    menu_for_next_item = types.ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        input_field_placeholder=f"–î–æ–¥–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä –≤—ñ–¥ {supplier_name}"
    )

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è FSM-—Å—Ç–∞–Ω—É –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
    await state.set_state(ReceiptStates.waiting_for_item_name) 
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ù–û–í–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é (–∑ —Ç–æ–≤–∞—Ä–∞–º–∏)
    await callback.message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä **{item_name}** –¥–æ–¥–∞–Ω–æ –¥–æ –ø—Ä–∏—Ö–æ–¥—É ‚Ññ{receipt_id}. –û–±–ª—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ. (–°—É–º–∞: **{line_total}**)\n"
        f"–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ. –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä –≤—ñ–¥ **{supplier_name}**:", 
        reply_markup=menu_for_next_item, 
        parse_mode="Markdown"
    )

# ----------------------------------------------------------------------
# –°–ö–ê–°–£–í–ê–ù–ù–Ø –í –Ü–ù–®–ò–• –°–¢–ê–ù–ê–• (–ù–ï waiting_for_item_name)
# ----------------------------------------------------------------------

@router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ü—Ä–∏—Ö—ñ–¥")
async def handle_cancel_anywhere(message: types.Message, state: FSMContext, db: Database):
    await state.clear()
    await message.reply("–ü—Ä–∏–π–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu(db.get_user_role(message.from_user.id)[0]))