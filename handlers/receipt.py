import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database
from .auth import get_main_menu # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è
class ReceiptStates(StatesGroup):
    waiting_for_supplier = State()
    waiting_for_item_name = State()
    waiting_for_quantity = State()
    waiting_for_price = State()
    confirm_receipt = State()

router = Router()

# --- –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫) ---

@router.message(F.text == "üì¶ –°–∫–ª–∞–¥/–ü—Ä–∏—Ö–æ–¥" or F.text == "üì¶ –ü—Ä–∏–µ–º–∫–∞ –¢–æ–≤–∞—Ä–∞")
async def handle_start_receipt(message: types.Message, state: FSMContext, db):
    
    # –¢–µ–ø–µ—Ä—å –æ–±—ä–µ–∫—Ç db (–∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ Database) 
    # –±—É–¥–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —Å—é–¥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Dispatcher.
    
    telegram_id = message.from_user.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_user_role, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ database.py
    role, _ = db.get_user_role(telegram_id) 

    if role not in ['–∞–¥–º–∏–Ω', '–∑–∞–≤—Å–∫–ª–∞–¥–∞']:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é.")
        return
        
    suppliers = db.get_suppliers()
        
    if not suppliers:
        await message.reply("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏'.")
        return

    # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
    supplier_buttons = [types.KeyboardButton(text=name) for id, name in suppliers]
    keyboard_rows = [supplier_buttons[i:i + 2] for i in range(0, len(supplier_buttons), 2)]
    keyboard_rows.append([types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]) # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    
    menu = types.ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
    )
    
    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    supplier_map = {name: id for id, name in suppliers}
    await state.update_data(supplier_map=supplier_map)
    
    # 3. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ReceiptStates.waiting_for_supplier)
    await message.reply("–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å **–û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è –¢–æ–≤–∞—Ä–∞**.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", 
                        reply_markup=menu, 
                        parse_mode="Markdown")

# --- –®–∞–≥ 2: –í—ã–±–æ—Ä –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ ---

@router.message(ReceiptStates.waiting_for_supplier)
async def process_supplier(message: types.Message, state: FSMContext, db: Database = None):
    
    if db is None: db = message.bot.get('db') 
        
    data = await state.get_data()
    supplier_map = data.get('supplier_map')
    supplier_name = message.text
    
    if supplier_name not in supplier_map:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")
        return
        
    supplier_id = supplier_map[supplier_name]
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ database.py –¥–ª—è —ç—Ç–æ–≥–æ)
    items = db.get_items_by_supplier(supplier_id) 
    
    # ... (–û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞, –∫–∞–∫ –±—ã–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ)
    # ...
    
    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ ReceiptStates.waiting_for_item_name
    await state.update_data(
        current_receipt_supplier_id=supplier_id,
        current_receipt_supplier_name=supplier_name,
        current_items_map={item[1]: (item[0], item[2]) for item in items} # {–ù–∞–∑–≤–∞–Ω–∏–µ: (ID, –¶–µ–Ω–∞)}
    )

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (–Ω—É–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
    item_buttons = [types.KeyboardButton(text=item[1]) for item in items]
    keyboard_rows = [item_buttons[i:i + 2] for i in range(0, len(item_buttons), 2)]
    keyboard_rows.append([types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    
    menu = types.ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True,
        input_field_placeholder=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –æ—Ç {supplier_name}"
    )

    await state.set_state(ReceiptStates.waiting_for_item_name)
    await message.reply(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: **{supplier_name}**.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", 
                        reply_markup=menu, 
                        parse_mode="Markdown")
    
    # --- –®–∞–≥ 3: –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ ---
@router.message(ReceiptStates.waiting_for_item_name)
async def process_item_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item_map = data.get('current_items_map')
    item_name = message.text

    if item_name not in item_map:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return

    item_id, default_price = item_map[item_name]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –∏–º—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await state.update_data(
        current_item_id=item_id,
        current_item_name=item_name
    )

    await state.set_state(ReceiptStates.waiting_for_quantity)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ
    menu = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.reply(f"–¢–æ–≤–∞—Ä: **{item_name}**.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5):",
                        reply_markup=menu,
                        parse_mode="Markdown")

# --- –®–∞–≥ 4: –û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞–∫—É–ø–∫–∏ ---
@router.message(ReceiptStates.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = float(message.text.replace(',', '.'))
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –∏–ª–∏ 5.5):")
        return

    await state.update_data(current_quantity=quantity)
    await state.set_state(ReceiptStates.waiting_for_price)

    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50.00):")

# --- –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î ---
@router.message(ReceiptStates.waiting_for_price)
async def process_price_and_confirm(message: types.Message, state: FSMContext, db):
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50.00):")
        return

    data = await state.get_data()
    supplier_id = data['current_receipt_supplier_id']
    item_id = data['current_item_id']
    quantity = data['current_quantity']
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_amount = round(quantity * price, 2)
    
    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏—Ö–æ–¥–∞
    # –ú—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ execute_query –≤–µ—Ä–Ω–µ—Ç ID –Ω–æ–≤–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
    new_receipt_id = db.create_new_receipt(
        supplier_id=supplier_id,
        user_id=message.from_user.id
    )

    if not new_receipt_id:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
                            reply_markup=get_main_menu('–∞–¥–º–∏–Ω'))
        await state.clear()
        return

    # 2. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–∏—Ö–æ–¥–∞
    db.add_receipt_line(
        receipt_id=new_receipt_id,
        item_id=item_id,
        quantity=quantity,
        price=price
    )
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    db.update_inventory(
        item_id=item_id,
        quantity=quantity,
        price=price # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∑–∞–∫—É–ø–∫–∏
    )
    
    summary = (
        f"‚úÖ **–ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!**\n"
        f"–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ: {new_receipt_id}\n"
        f"–¢–æ–≤–∞—Ä: {data['current_item_name']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: {price} –∑–∞ –µ–¥.\n"
        f"**–û–±—â–∞—è —Å—É–º–º–∞: {total_amount}**"
    )

    await message.reply(summary, 
                        reply_markup=get_main_menu(db.get_user_role(message.from_user.id)[0]), 
                        parse_mode="Markdown")
    await state.clear()